- cols:
  - fullname
  - framework
  - code
  - exclude
  - note
  framework: elemnt-plus
  model: devel.ui.view.model.types
  script: "\n<script>\t\n\timport {\n\t    defineComponent,\n\t    defineAsyncComponent,\n\
    \t    onMounted,\n\t    ref,\n\t    reactive,\n\t    getCurrentInstance,\n\t \
    \   render,\n\t    createVNode\n\t}\n\tfrom 'vue'\n\t\n\texport default defineComponent({\n\
    \t    name: 'gp-form',\n\t    props: ['cid', 'metas', 'model'],\n\t    setup(props)\
    \ {\n\t        const {\n\t            proxy\n\t        } = getCurrentInstance()\n\
    \t        const mode = ref('new')\n\t        const page = ref(1)\n\t        const\
    \ pageSize = ref(1)\n\t        const showSearch = ref(false)\n\t        const\
    \ colsType = reactive({})\n\t        const colsLabel = reactive({})\n\t      \
    \  const colsTranslate = reactive({})\n\t        const colsLang = reactive({})\n\
    \t        const dataForm = reactive({})\n\t        const selOptions = reactive({})\n\
    \t        const fields = reactive([])\n\t        const cols = reactive([])\n\t\
    \        const o2mcols = reactive([])\n\t        const multipleSelection = reactive([])\n\
    \t\n\t        const readonly = col => {\n\t            return mode.value == 'lookup'\
    \ || isCompute(col)\n\t        }\n\t\n\t        const i18nCommand = (command)\
    \ =>{\n\t          console.log('command-18n:',command)\n\t          colsLang[command.col]\
    \ = command.lang\n\t        };\n\t        const handleSelectionChange = val =>\
    \ {\n\t            console.log('selection:', val)\n\t            multipleSelection.splice(0,\
    \ multipleSelection.length, ...val)\n\t        }\n\t\n\t        const handleCurrentChange\
    \ = val => {\n\t            page.value = val\n\t            proxy.$websocket.send({\n\
    \t                    _msg: [\n\t                        props.cid,\n\t      \
    \                  'models',\n\t                        props.model,\n\t     \
    \                   'read', {\n\t                            fields: fields,\n\
    \t                            ids: multipleSelection[page.value - 1],\n\t    \
    \                        context: proxy.$UserPreferences.Context\n\t         \
    \               }\n\t                    ]\n\t                },\n\t         \
    \       on_read\n\t            )\n\t        }\n\t\n\t        const isCompute =\
    \ col => {\n\t            return (\n\t                ('compute' in props.metas[props.model].meta.columns[col]\
    \ &&\n\t                    props.metas[props.model].meta.columns[col].compute\
    \ != null) ||\n\t                colsType[col] == 'composite'\n\t            )\n\
    \t        }\n\t\n\t        const _get_selections = s => {\n\t            let r\
    \ = []\n\t            for (let j = 0; j < s.length; j++) r.push({\n\t        \
    \        label: s[j][1],\n\t                value: s[j][0]\n\t            })\n\
    \t            return r\n\t        }\n\t\n\t        const on_find_new = (value,\
    \ opts) => {\n\t            console.log('on_find_new:', value, opts)\n\t     \
    \       if (\n\t                ['new', 'edit'].indexOf(mode.value) >= 0 &&\n\t\
    \                value.id &&\n\t                value.id.length > 0 &&\n\t   \
    \             value.name &&\n\t                value.name.length > 0\n\t     \
    \       )\n\t                dataForm[opts.col] = value\n\t        }\n\t\n\t \
    \       const fieldsBuild = (model, view) => {\n\t            let fcols = []\n\
    \t            for (let i = 0, columns = Object.keys(props.metas[model].views[view].columns),\
    \ k = {}; i < columns.length; i++)\n\t                switch (props.metas[model].meta.columns[columns[i]].type)\
    \ {\n\t                    case 'one2many':\n\t                        k = {}\n\
    \t                        if (props.metas[model].meta.columns[columns[i]].obj\
    \ != model)\n\t                            k[columns[i]] = fieldsBuild(props.metas[model].meta.columns[columns[i]].obj,\
    \ 'form')\n\t                        else k[columns[i]] = Object.keys(props.metas[model].views.list.columns)\n\
    \t                        fcols.push(k)\n\t                        break\n\t \
    \                   case 'many2many':\n\t                        k = {}\n\t  \
    \                      k[columns[i]] = Object.keys(\n\t                      \
    \      props.metas[props.metas[model].meta.columns[columns[i]].obj].views.m2mlist.columns\n\
    \t                        )\n\t                        fcols.push(k)\n\t     \
    \                   break\n\t                    default:\n\t                \
    \        fcols.push(columns[i])\n\t                }\n\t            return fcols\n\
    \t        }\n\t\n\t        const do_find = col => {\n\t            const rootComponent\
    \ = defineAsyncComponent({\n\t                loader: () =>\n\t              \
    \      import ('./gp-find.vue'),\n\t                suspensible: false\n\t   \
    \         })\n\t            const rootProps = {\n\t                cid: props.cid,\n\
    \t                model: props.metas[props.model].meta.columns[col].obj,\n\t \
    \               mode: 'single',\n\t                callback: on_find_new,\n\t\
    \                callbackOpts: {\n\t                    col: col,\n\t        \
    \            mode: 'find'\n\t                }\n\t            }\n\t          \
    \  const vnode = createVNode(rootComponent, rootProps)\n\t            vnode.appContext\
    \ = proxy.$appcontext\n\t            const rootContainer = document.createElement('div')\n\
    \t            render(vnode, rootContainer, false)\n\t            document.body.appendChild(rootContainer)\n\
    \t            console.log('do-search!', col, vnode, proxy)\n\t        }\n\t\n\t\
    \        const do_search = event => {\n\t            proxy.$websocket.send({\n\
    \t                    _msg: [\n\t                        props.cid,\n\t      \
    \                  'models',\n\t                        props.model,\n\t     \
    \                   'search', {\n\t                            cond: event.cond,\n\
    \t                            context: proxy.$UserPreferences.Context,       \
    \                     \n\t                            offset: event.offset.value,\n\
    \t                            limit: event.limit.value\n\t                   \
    \         }\n\t                    ]\n\t                },\n\t               \
    \ on_search\n\t            )\n\t        }\n\t\n\t        const on_search = msg\
    \ => {\n\t            console.log('on-search:', msg)\n\t            if (msg.length\
    \ > 0) {\n\t                multipleSelection.splice(0, multipleSelection.length,\
    \ ...msg)\n\t                showSearch.value = false\n\t                mode.value\
    \ = 'edit'\n\t                proxy.$websocket.send({\n\t                    \
    \    _msg: [\n\t                            props.cid,\n\t                   \
    \         'models',\n\t                            props.model,\n\t          \
    \                  'read', {\n\t                                fields: fields,\n\
    \t                                ids: multipleSelection[page.value - 1],\n\t\
    \                                context: proxy.$UserPreferences.Context\n\t \
    \                           }\n\t                        ]\n\t               \
    \     },\n\t                    on_read\n\t                )\n\t            }\n\
    \t        }\n\t        const do_modal_form = (col, oid, mode) => {\n\t       \
    \     const rootComponent = defineAsyncComponent({\n\t                loader:\
    \ () =>\n\t                    import ('./gp-form-modal.vue'),\n\t           \
    \     suspensible: false\n\t            })\n\t            const rootProps = {\n\
    \t                cid: props.cid,\n\t                model: props.metas[props.model].meta.columns[col].obj,\n\
    \t                oid: oid,\n\t                mode: mode\n\t            }\n\t\
    \            if (mode === 'new') {\n\t                rootProps.callback = on_find_new\n\
    \t                rootProps.callbackOpts = {\n\t                    col: col,\n\
    \t                    mode: 'new'\n\t                }\n\t            }\n\t  \
    \          const vnode = createVNode(rootComponent, rootProps)\n\t           \
    \ vnode.appContext = proxy.$appcontext\n\t            const rootContainer = document.createElement('div')\n\
    \t            render(vnode, rootContainer, false)\n\t            document.querySelector('#sv').appendChild(rootContainer)\n\
    \t        }\n\t\n\t        const do_action = action => {\n\t            console.log('action:',\
    \ action)\n\t            switch (action) {\n\t                case 'new':\n\t\
    \                    mode.value = 'new'\n\t                    break\n\t     \
    \           case 'edit':\n\t                    mode.value = 'edit'\n\t      \
    \              break\n\t                case 'lookup':\n\t                   \
    \ mode.value = 'lookup'\n\t                    break\n\t                case 'find':\n\
    \t                    showSearch.value = true\n\t                    break\n\t\
    \            }\n\t        }\n\t\n\t        const do_add = col => {\n\t       \
    \     do_modal_form(col, null, 'new')\n\t            console.log('do-add!', col)\n\
    \t        }\n\t\n\t        const do_edit = (col, oid) => {\n\t            do_modal_form(col,\
    \ oid, 'edit')\n\t            console.log('do-edit!', col, oid)\n\t        }\n\
    \t\n\t        const do_lookup = (col, oid) => {\n\t            do_modal_form(col,\
    \ oid, 'lookup')\n\t            console.log('do-lookup!', col, oid)\n\t      \
    \  }\n\t\n\t        const onSubmit = () => {\n\t            console.log('submit!')\n\
    \t        }\n\t\n\t        const onValidate = () => {\n\t            console.log('validate')\n\
    \t        }\n\t\n\t        const onCancel = () => {\n\t            console.log('cancel!')\n\
    \t            for (\n\t                let i = 0,\n\t                    c = Object.keys(props.metas[props.model].views.form.columns),\n\
    \t                    meta = props.metas[props.model].meta.columns; i < c.length;\
    \ i++\n\t            ) {\n\t                switch (meta[c[i]].type) {\n\t   \
    \                 case 'many2one':\n\t                        dataForm[c[i]] =\
    \ {\n\t                            id: null,\n\t                            name:\
    \ null\n\t                        }\n\t                        break\n\t     \
    \               case 'one2many':\n\t                    case 'many2many':\n\t\
    \                        dataForm[c[i]] = []\n\t                        break\n\
    \t                    case 'selection':\n\t                        dataForm[c[i]]\
    \ = ''\n\t                        break\n\t                    case 'boolean':\n\
    \t                        dataForm[c[i]] = false\n\t                        break\n\
    \t                    default:\n\t                        dataForm[c[i]] = ''\n\
    \t                }\n\t            }\n\t        }\n\t\n\t        const on_read\
    \ = msg => {\n\t            console.log('on_read:', msg)\n\t            if (msg\
    \ && msg.length > 0) Object.assign(dataForm, msg[0])\n\t        }\n\t\n\t    \
    \    onMounted(() => {\n\t            for (\n\t                let i = 0,\n\t\
    \                    c = Object.keys(props.metas[props.model].views.form.columns),\n\
    \t                    meta = props.metas[props.model].meta.columns; i < c.length;\
    \ i++\n\t            ) {\n\t                colsType[c[i]] = meta[c[i]].type\n\
    \t                colsLabel[c[i]] = meta[c[i]].label\n\t                colsTranslate[c[i]]\
    \ = 'translate' in meta[c[i]] ? meta[c[i]].translate:false\n\t               \
    \ colsLang[c[i]] = proxy.$UserPreferences.lang\n\t                if (colsType[c[i]]\
    \ == 'one2many') o2mcols.push(c[i])\n\t                else cols.push(c[i])\n\t\
    \n\t                switch (meta[c[i]].type) {\n\t                    case 'many2one':\n\
    \t                        dataForm[c[i]] = {\n\t                            id:\
    \ null,\n\t                            name: null\n\t                        }\n\
    \t                        break\n\t                    case 'one2many':\n\t  \
    \                  case 'many2many':\n\t                        dataForm[c[i]]\
    \ = []\n\t                        break\n\t                    case 'selection':\n\
    \t                        selOptions[c[i]] = _get_selections(meta[c[i]].selections)\n\
    \t                        dataForm[c[i]] = ''\n\t                        break\n\
    \t                    case 'boolean':\n\t                        dataForm[c[i]]\
    \ = false\n\t                        break\n\t                    default:\n\t\
    \                        dataForm[c[i]] = ''\n\t                }\n\t        \
    \    }\n\t            console.log('translate:',colsTranslate,colsType)\n\t   \
    \         fields.splice(0, fields.length, ...fieldsBuild(props.model, 'form'))\n\
    \t            if (mode.value !== 'new')\n\t                proxy.$websocket.send({\n\
    \t                        _msg: [props.cid, 'models', props.model, 'select', {\n\
    \t                            fields: fields,\n\t                            context:\
    \ proxy.$UserPreferences.Context,\n\t                            limit: 1\n\t\
    \                        }]\n\t                    },\n\t                    on_read\n\
    \t                )\n\t                //console.log('fields:',fields);\n\t  \
    \      })\n\t        return {\n\t            mode,\n\t            readonly,\n\t\
    \            i18nCommand,\n\t            isCompute,\n\t            showSearch,\n\
    \t            page,\n\t            pageSize,\n\t            multipleSelection,\n\
    \t            handleCurrentChange,\n\t            handleSelectionChange,\n\t \
    \           colsType,\n\t            colsLabel,\n\t            colsTranslate,\n\
    \t            colsLang,\n\t            dataForm,\n\t            selOptions,\n\t\
    \            fields,\n\t            cols,\n\t            o2mcols,\n\t        \
    \    fieldsBuild,\n\t            onSubmit,\n\t            onValidate,\n\t    \
    \        onCancel,\n\t            do_search,\n\t            on_search,\n\t   \
    \         do_action,\n\t            do_find,\n\t            do_add,\n\t      \
    \      do_edit,\n\t            do_lookup,\n\t            on_find_new,\n\t    \
    \        on_read\n\t        }\n\t    }\n\t})\n<script>\t\t\n\t"
  sfc: "\n<template>\t\n\t<slot name=\"search\">\n\t    <el-row>\n\t        <gp-selectable\
    \ v-if=\"showSearch\" :columns=\"metas[model].meta.columns\" :names=\"metas[model].meta.names\"\
    \ :cid=\"cid\" @update:search=\"do_search\" @update:search-cancel=\"showSearch\
    \ = false\"/>\n\t    </el-row>\n\t</slot>\n\t<slot>\n\t    <el-row>{{ mode +':'\
    \ + metas[model].meta.description }}</el-row>\n\t    <el-row>\n\t       <el-dropdown\
    \ @command=\"i18nCommand\">\n\t          <span class=\"el-dropdown-link\">\n\t\
    \            {{$UserPreferences.lang.toLowerCase()}}<i class=\"el-icon-arrow-down\
    \ el-icon--right\"></i>\n\t          </span>\n\t          <template #dropdown>\n\
    \t            <el-dropdown-menu>\n\t              <el-dropdown-item v-for=\"lang\
    \ in $UserPreferences.langs\" :key=lang.code :command=\"{lang:lang.code}\">{{lang.description}}</el-dropdown-item>\n\
    \t            </el-dropdown-menu>\n\t          </template>\n\t        </el-dropdown>\t\
    \n\t    </el-row>\n\t    <el-row>\n\t        <el-button type=\"primary\" size=\"\
    mini\" icon=\"el-icon-search\" @click=\"do_action('find')\"></el-button>\n\t \
    \       <el-button v-if=\"multipleSelection.length == 0\" type=\"primary\" size=\"\
    mini\" icon=\"el-icon-document-add\" @click=\"do_action('new')\"></el-button>\n\
    \t        <el-button v-if=\"multipleSelection.length > 0\" type=\"primary\" size=\"\
    mini\" icon=\"el-icon-edit\" @click=\"do_action('edit')\"></el-button>\n\t   \
    \     <el-button v-if=\"multipleSelection.length > 0\" type=\"primary\" size=\"\
    mini\" icon=\"el-icon-view\" @click=\"do_action('lookup')\"></el-button>\n\t \
    \   </el-row>\n\t    <el-pagination v-if=\"multipleSelection.length > 1\" background\
    \ layout=\"prev, pager, next\" @current-change=\"handleCurrentChange\" :page-size=\"\
    pageSize\" :total=\"multipleSelection.length\">\n\t    </el-pagination>\n\t  \
    \  <el-form :model=\"dataForm\" label-width=\"auto\">\n\t\n\t\t\t\t<el-form-item\
    \ :label=\"colsLabel['fullname']\"\t\n\t\t\t\t\t<el-input v-model=\"dataForm['fullname']\"\
    \ maxlength=\"32767\" show-word-limit :prefix-icon=\"isCompute('fullname') ? 'el-icon-s-data':''\"\
    \ :readonly=\"readonly('fullname')\">\n\t\t\t\t\t\t<template #prefix>\n\t\t\t\t\
    \t\t   <el-dropdown v-if=\"colsTranslate['fullname']\" @command=\"i18nCommand\"\
    >\n\t\t\t\t\t\t\t  <span class=\"el-dropdown-link\">\n\t\t\t\t\t\t\t\t{{colsLang['fullname'].toLowerCase()}}<i\
    \ class=\"el-icon-arrow-down el-icon--right\"></i>\n\t\t\t\t\t\t\t  </span>\n\t\
    \t\t\t\t\t\t  <template #dropdown>\n\t\t\t\t\t\t\t\t<el-dropdown-menu>\n\t\t\t\
    \t\t\t\t\t  <el-dropdown-item v-for=\"lang in $UserPreferences.langs\" :key=lang.code\
    \ :command=\"{col:'fullname',lang:lang.code}\">{{lang.description}}</el-dropdown-item>\n\
    \t\t\t\t\t\t\t\t</el-dropdown-menu>\n\t\t\t\t\t\t\t  </template>\n\t\t\t\t\t\t\
    \t</el-dropdown>\n\t\t\t\t\t\t </template>\n\t\t\t\t\t</el-input>\n\t\t\t\t</el-form-item>\t\
    \t\t\n\t\t\t\n\t\t\t\t<el-form-item :label=\"colsLabel['framework']\"\n\t\t\t\t\
    \t<el-input v-model=\"dataForm['framework'].name\" :prefix-icon=\"isCompute('framework')\
    \ ? 'el-icon-s-data':''\" :readonly=\"readonly('framework')\">\n\t\t\t\t\t\t<template\
    \ #suffix>\n\t\t\t\t\t\t\t<el-button type=\"primary\" size=\"mini\" icon=\"el-icon-search\"\
    \ @click=\"do_find('framework')\"/>\n\t\t\t\t\t\t\t<el-button type=\"primary\"\
    \ size=\"mini\" icon=\"el-icon-document-add\" @click=\"do_add('framework')\"/>\n\
    \t\t\t\t\t\t\t<el-button v-if=\"dataForm['framework'].id != null\" type=\"primary\"\
    \ size=\"mini\" icon=\"el-icon-edit\" @click=\"do_edit('framework',dataForm['framework'].id)\"\
    /></\n\t\t\t\t\t\t\t<el-button v-if=\"dataForm['framework'].id != null\" type=\"\
    primary\" size=\"mini\" icon=\"el-icon-view\" @click=\"do_lookup('framework',dataForm['framework'].id)\"\
    />\n\t\t\t\t\t\t</template>\n\t\t\t\t\t</el-input>\n\t\t\t\t</el-form-item>\n\t\
    \t\t\t\t\t\t\n\t\t\t\t<el-form-item :label=\"colsLabel['code']\"\t\n\t\t\t\t\t\
    <el-input v-model=\"dataForm['code']\" maxlength=\"32\" show-word-limit :prefix-icon=\"\
    isCompute('code') ? 'el-icon-s-data':''\" :readonly=\"readonly('code')\">\n\t\t\
    \t\t\t\t<template #prefix>\n\t\t\t\t\t\t   <el-dropdown v-if=\"colsTranslate['code']\"\
    \ @command=\"i18nCommand\">\n\t\t\t\t\t\t\t  <span class=\"el-dropdown-link\"\
    >\n\t\t\t\t\t\t\t\t{{colsLang['code'].toLowerCase()}}<i class=\"el-icon-arrow-down\
    \ el-icon--right\"></i>\n\t\t\t\t\t\t\t  </span>\n\t\t\t\t\t\t\t  <template #dropdown>\n\
    \t\t\t\t\t\t\t\t<el-dropdown-menu>\n\t\t\t\t\t\t\t\t  <el-dropdown-item v-for=\"\
    lang in $UserPreferences.langs\" :key=lang.code :command=\"{col:'code',lang:lang.code}\"\
    >{{lang.description}}</el-dropdown-item>\n\t\t\t\t\t\t\t\t</el-dropdown-menu>\n\
    \t\t\t\t\t\t\t  </template>\n\t\t\t\t\t\t\t</el-dropdown>\n\t\t\t\t\t\t </template>\n\
    \t\t\t\t\t</el-input>\n\t\t\t\t</el-form-item>\t\t\t\n\t\t\t\n\t\t\t   \t<el-form-item\
    \ :label=\"colsLabel['exclude']\"\n\t\t\t\t\t<json-viewer :value=\"dataForm['exclude']\"\
    \ copyable boxed sort />\n\t\t\t\t</el-form-item>\n\t\t\t\t\n\t\t\t   \t<el-form-item\
    \ :label=\"colsLabel['note']\"\n\t\t\t\t\t<el-input v-model=\"dataForm['note']\"\
    \ type=\"textarea\" :readonly=\"readonly('note')\"/>            \n\t\t\t\t</el-form-item>\n\
    \t\t    <el-tabs type=\"border-card\" v-if=\"o2mcols.length > 0\">\n\t\t     \
    \   <el-tab-pane :label=\"colsLabel[o2mcol]\" v-for=\"o2mcol in o2mcols\" :key=\"\
    o2mcol\">\n\t\t            <gp-o2m-components :cid=\"cid\" :metas=\"metas\" :model=\"\
    metas[model].meta.columns[o2mcol].obj\" :cdata=\"dataForm[o2mcol]\" :mode=\"mode\"\
    />\n\t\t        </el-tab-pane>\n\t\t    </el-tabs>\n\t    </el-form>\n\t</slot>\n\
    \t<slot name=\"footer\">\n\t    <el-popconfirm confirmButtonText='OK' cancelButtonText='No,\
    \ Thanks' icon=\"el-icon-info\" iconColor=\"red\" title=\"Are you sure to cancel?\"\
    \ @confirm=\"onCancel\">\n\t        <template #reference>\n\t            <el-button\
    \ type=\"danger\">Cancel</el-button>\n\t        </template>\n\t    </el-popconfirm>\n\
    \t    <el-button type=\"success\" @click=\"onValidate\">Validate</el-button>\n\
    \t    <el-button type=\"primary\" @click=\"onSubmit\">Save</el-button>\n\t</slot>\t\
    \n</template>\t\t\n\t\n\n<script>\t\n\timport {\n\t    defineComponent,\n\t  \
    \  defineAsyncComponent,\n\t    onMounted,\n\t    ref,\n\t    reactive,\n\t  \
    \  getCurrentInstance,\n\t    render,\n\t    createVNode\n\t}\n\tfrom 'vue'\n\t\
    \n\texport default defineComponent({\n\t    name: 'gp-form',\n\t    props: ['cid',\
    \ 'metas', 'model'],\n\t    setup(props) {\n\t        const {\n\t            proxy\n\
    \t        } = getCurrentInstance()\n\t        const mode = ref('new')\n\t    \
    \    const page = ref(1)\n\t        const pageSize = ref(1)\n\t        const showSearch\
    \ = ref(false)\n\t        const colsType = reactive({})\n\t        const colsLabel\
    \ = reactive({})\n\t        const colsTranslate = reactive({})\n\t        const\
    \ colsLang = reactive({})\n\t        const dataForm = reactive({})\n\t       \
    \ const selOptions = reactive({})\n\t        const fields = reactive([])\n\t \
    \       const cols = reactive([])\n\t        const o2mcols = reactive([])\n\t\
    \        const multipleSelection = reactive([])\n\t\n\t        const readonly\
    \ = col => {\n\t            return mode.value == 'lookup' || isCompute(col)\n\t\
    \        }\n\t\n\t        const i18nCommand = (command) =>{\n\t          console.log('command-18n:',command)\n\
    \t          colsLang[command.col] = command.lang\n\t        };\n\t        const\
    \ handleSelectionChange = val => {\n\t            console.log('selection:', val)\n\
    \t            multipleSelection.splice(0, multipleSelection.length, ...val)\n\t\
    \        }\n\t\n\t        const handleCurrentChange = val => {\n\t           \
    \ page.value = val\n\t            proxy.$websocket.send({\n\t                \
    \    _msg: [\n\t                        props.cid,\n\t                       \
    \ 'models',\n\t                        props.model,\n\t                      \
    \  'read', {\n\t                            fields: fields,\n\t              \
    \              ids: multipleSelection[page.value - 1],\n\t                   \
    \         context: proxy.$UserPreferences.Context\n\t                        }\n\
    \t                    ]\n\t                },\n\t                on_read\n\t \
    \           )\n\t        }\n\t\n\t        const isCompute = col => {\n\t     \
    \       return (\n\t                ('compute' in props.metas[props.model].meta.columns[col]\
    \ &&\n\t                    props.metas[props.model].meta.columns[col].compute\
    \ != null) ||\n\t                colsType[col] == 'composite'\n\t            )\n\
    \t        }\n\t\n\t        const _get_selections = s => {\n\t            let r\
    \ = []\n\t            for (let j = 0; j < s.length; j++) r.push({\n\t        \
    \        label: s[j][1],\n\t                value: s[j][0]\n\t            })\n\
    \t            return r\n\t        }\n\t\n\t        const on_find_new = (value,\
    \ opts) => {\n\t            console.log('on_find_new:', value, opts)\n\t     \
    \       if (\n\t                ['new', 'edit'].indexOf(mode.value) >= 0 &&\n\t\
    \                value.id &&\n\t                value.id.length > 0 &&\n\t   \
    \             value.name &&\n\t                value.name.length > 0\n\t     \
    \       )\n\t                dataForm[opts.col] = value\n\t        }\n\t\n\t \
    \       const fieldsBuild = (model, view) => {\n\t            let fcols = []\n\
    \t            for (let i = 0, columns = Object.keys(props.metas[model].views[view].columns),\
    \ k = {}; i < columns.length; i++)\n\t                switch (props.metas[model].meta.columns[columns[i]].type)\
    \ {\n\t                    case 'one2many':\n\t                        k = {}\n\
    \t                        if (props.metas[model].meta.columns[columns[i]].obj\
    \ != model)\n\t                            k[columns[i]] = fieldsBuild(props.metas[model].meta.columns[columns[i]].obj,\
    \ 'form')\n\t                        else k[columns[i]] = Object.keys(props.metas[model].views.list.columns)\n\
    \t                        fcols.push(k)\n\t                        break\n\t \
    \                   case 'many2many':\n\t                        k = {}\n\t  \
    \                      k[columns[i]] = Object.keys(\n\t                      \
    \      props.metas[props.metas[model].meta.columns[columns[i]].obj].views.m2mlist.columns\n\
    \t                        )\n\t                        fcols.push(k)\n\t     \
    \                   break\n\t                    default:\n\t                \
    \        fcols.push(columns[i])\n\t                }\n\t            return fcols\n\
    \t        }\n\t\n\t        const do_find = col => {\n\t            const rootComponent\
    \ = defineAsyncComponent({\n\t                loader: () =>\n\t              \
    \      import ('./gp-find.vue'),\n\t                suspensible: false\n\t   \
    \         })\n\t            const rootProps = {\n\t                cid: props.cid,\n\
    \t                model: props.metas[props.model].meta.columns[col].obj,\n\t \
    \               mode: 'single',\n\t                callback: on_find_new,\n\t\
    \                callbackOpts: {\n\t                    col: col,\n\t        \
    \            mode: 'find'\n\t                }\n\t            }\n\t          \
    \  const vnode = createVNode(rootComponent, rootProps)\n\t            vnode.appContext\
    \ = proxy.$appcontext\n\t            const rootContainer = document.createElement('div')\n\
    \t            render(vnode, rootContainer, false)\n\t            document.body.appendChild(rootContainer)\n\
    \t            console.log('do-search!', col, vnode, proxy)\n\t        }\n\t\n\t\
    \        const do_search = event => {\n\t            proxy.$websocket.send({\n\
    \t                    _msg: [\n\t                        props.cid,\n\t      \
    \                  'models',\n\t                        props.model,\n\t     \
    \                   'search', {\n\t                            cond: event.cond,\n\
    \t                            context: proxy.$UserPreferences.Context,       \
    \                     \n\t                            offset: event.offset.value,\n\
    \t                            limit: event.limit.value\n\t                   \
    \         }\n\t                    ]\n\t                },\n\t               \
    \ on_search\n\t            )\n\t        }\n\t\n\t        const on_search = msg\
    \ => {\n\t            console.log('on-search:', msg)\n\t            if (msg.length\
    \ > 0) {\n\t                multipleSelection.splice(0, multipleSelection.length,\
    \ ...msg)\n\t                showSearch.value = false\n\t                mode.value\
    \ = 'edit'\n\t                proxy.$websocket.send({\n\t                    \
    \    _msg: [\n\t                            props.cid,\n\t                   \
    \         'models',\n\t                            props.model,\n\t          \
    \                  'read', {\n\t                                fields: fields,\n\
    \t                                ids: multipleSelection[page.value - 1],\n\t\
    \                                context: proxy.$UserPreferences.Context\n\t \
    \                           }\n\t                        ]\n\t               \
    \     },\n\t                    on_read\n\t                )\n\t            }\n\
    \t        }\n\t        const do_modal_form = (col, oid, mode) => {\n\t       \
    \     const rootComponent = defineAsyncComponent({\n\t                loader:\
    \ () =>\n\t                    import ('./gp-form-modal.vue'),\n\t           \
    \     suspensible: false\n\t            })\n\t            const rootProps = {\n\
    \t                cid: props.cid,\n\t                model: props.metas[props.model].meta.columns[col].obj,\n\
    \t                oid: oid,\n\t                mode: mode\n\t            }\n\t\
    \            if (mode === 'new') {\n\t                rootProps.callback = on_find_new\n\
    \t                rootProps.callbackOpts = {\n\t                    col: col,\n\
    \t                    mode: 'new'\n\t                }\n\t            }\n\t  \
    \          const vnode = createVNode(rootComponent, rootProps)\n\t           \
    \ vnode.appContext = proxy.$appcontext\n\t            const rootContainer = document.createElement('div')\n\
    \t            render(vnode, rootContainer, false)\n\t            document.querySelector('#sv').appendChild(rootContainer)\n\
    \t        }\n\t\n\t        const do_action = action => {\n\t            console.log('action:',\
    \ action)\n\t            switch (action) {\n\t                case 'new':\n\t\
    \                    mode.value = 'new'\n\t                    break\n\t     \
    \           case 'edit':\n\t                    mode.value = 'edit'\n\t      \
    \              break\n\t                case 'lookup':\n\t                   \
    \ mode.value = 'lookup'\n\t                    break\n\t                case 'find':\n\
    \t                    showSearch.value = true\n\t                    break\n\t\
    \            }\n\t        }\n\t\n\t        const do_add = col => {\n\t       \
    \     do_modal_form(col, null, 'new')\n\t            console.log('do-add!', col)\n\
    \t        }\n\t\n\t        const do_edit = (col, oid) => {\n\t            do_modal_form(col,\
    \ oid, 'edit')\n\t            console.log('do-edit!', col, oid)\n\t        }\n\
    \t\n\t        const do_lookup = (col, oid) => {\n\t            do_modal_form(col,\
    \ oid, 'lookup')\n\t            console.log('do-lookup!', col, oid)\n\t      \
    \  }\n\t\n\t        const onSubmit = () => {\n\t            console.log('submit!')\n\
    \t        }\n\t\n\t        const onValidate = () => {\n\t            console.log('validate')\n\
    \t        }\n\t\n\t        const onCancel = () => {\n\t            console.log('cancel!')\n\
    \t            for (\n\t                let i = 0,\n\t                    c = Object.keys(props.metas[props.model].views.form.columns),\n\
    \t                    meta = props.metas[props.model].meta.columns; i < c.length;\
    \ i++\n\t            ) {\n\t                switch (meta[c[i]].type) {\n\t   \
    \                 case 'many2one':\n\t                        dataForm[c[i]] =\
    \ {\n\t                            id: null,\n\t                            name:\
    \ null\n\t                        }\n\t                        break\n\t     \
    \               case 'one2many':\n\t                    case 'many2many':\n\t\
    \                        dataForm[c[i]] = []\n\t                        break\n\
    \t                    case 'selection':\n\t                        dataForm[c[i]]\
    \ = ''\n\t                        break\n\t                    case 'boolean':\n\
    \t                        dataForm[c[i]] = false\n\t                        break\n\
    \t                    default:\n\t                        dataForm[c[i]] = ''\n\
    \t                }\n\t            }\n\t        }\n\t\n\t        const on_read\
    \ = msg => {\n\t            console.log('on_read:', msg)\n\t            if (msg\
    \ && msg.length > 0) Object.assign(dataForm, msg[0])\n\t        }\n\t\n\t    \
    \    onMounted(() => {\n\t            for (\n\t                let i = 0,\n\t\
    \                    c = Object.keys(props.metas[props.model].views.form.columns),\n\
    \t                    meta = props.metas[props.model].meta.columns; i < c.length;\
    \ i++\n\t            ) {\n\t                colsType[c[i]] = meta[c[i]].type\n\
    \t                colsLabel[c[i]] = meta[c[i]].label\n\t                colsTranslate[c[i]]\
    \ = 'translate' in meta[c[i]] ? meta[c[i]].translate:false\n\t               \
    \ colsLang[c[i]] = proxy.$UserPreferences.lang\n\t                if (colsType[c[i]]\
    \ == 'one2many') o2mcols.push(c[i])\n\t                else cols.push(c[i])\n\t\
    \n\t                switch (meta[c[i]].type) {\n\t                    case 'many2one':\n\
    \t                        dataForm[c[i]] = {\n\t                            id:\
    \ null,\n\t                            name: null\n\t                        }\n\
    \t                        break\n\t                    case 'one2many':\n\t  \
    \                  case 'many2many':\n\t                        dataForm[c[i]]\
    \ = []\n\t                        break\n\t                    case 'selection':\n\
    \t                        selOptions[c[i]] = _get_selections(meta[c[i]].selections)\n\
    \t                        dataForm[c[i]] = ''\n\t                        break\n\
    \t                    case 'boolean':\n\t                        dataForm[c[i]]\
    \ = false\n\t                        break\n\t                    default:\n\t\
    \                        dataForm[c[i]] = ''\n\t                }\n\t        \
    \    }\n\t            console.log('translate:',colsTranslate,colsType)\n\t   \
    \         fields.splice(0, fields.length, ...fieldsBuild(props.model, 'form'))\n\
    \t            if (mode.value !== 'new')\n\t                proxy.$websocket.send({\n\
    \t                        _msg: [props.cid, 'models', props.model, 'select', {\n\
    \t                            fields: fields,\n\t                            context:\
    \ proxy.$UserPreferences.Context,\n\t                            limit: 1\n\t\
    \                        }]\n\t                    },\n\t                    on_read\n\
    \t                )\n\t                //console.log('fields:',fields);\n\t  \
    \      })\n\t        return {\n\t            mode,\n\t            readonly,\n\t\
    \            i18nCommand,\n\t            isCompute,\n\t            showSearch,\n\
    \t            page,\n\t            pageSize,\n\t            multipleSelection,\n\
    \t            handleCurrentChange,\n\t            handleSelectionChange,\n\t \
    \           colsType,\n\t            colsLabel,\n\t            colsTranslate,\n\
    \t            colsLang,\n\t            dataForm,\n\t            selOptions,\n\t\
    \            fields,\n\t            cols,\n\t            o2mcols,\n\t        \
    \    fieldsBuild,\n\t            onSubmit,\n\t            onValidate,\n\t    \
    \        onCancel,\n\t            do_search,\n\t            on_search,\n\t   \
    \         do_action,\n\t            do_find,\n\t            do_add,\n\t      \
    \      do_edit,\n\t            do_lookup,\n\t            on_find_new,\n\t    \
    \        on_read\n\t        }\n\t    }\n\t})\n<script>\t\t\n\t\n\n<style scoped\
    \ lang=\"css\">\n<style>\t\n\t"
  style: "\n<style scoped lang=\"css\">\n<style>\t\n\t"
  template: "\n<template>\t\n\t<slot name=\"search\">\n\t    <el-row>\n\t        <gp-selectable\
    \ v-if=\"showSearch\" :columns=\"metas[model].meta.columns\" :names=\"metas[model].meta.names\"\
    \ :cid=\"cid\" @update:search=\"do_search\" @update:search-cancel=\"showSearch\
    \ = false\"/>\n\t    </el-row>\n\t</slot>\n\t<slot>\n\t    <el-row>{{ mode +':'\
    \ + metas[model].meta.description }}</el-row>\n\t    <el-row>\n\t       <el-dropdown\
    \ @command=\"i18nCommand\">\n\t          <span class=\"el-dropdown-link\">\n\t\
    \            {{$UserPreferences.lang.toLowerCase()}}<i class=\"el-icon-arrow-down\
    \ el-icon--right\"></i>\n\t          </span>\n\t          <template #dropdown>\n\
    \t            <el-dropdown-menu>\n\t              <el-dropdown-item v-for=\"lang\
    \ in $UserPreferences.langs\" :key=lang.code :command=\"{lang:lang.code}\">{{lang.description}}</el-dropdown-item>\n\
    \t            </el-dropdown-menu>\n\t          </template>\n\t        </el-dropdown>\t\
    \n\t    </el-row>\n\t    <el-row>\n\t        <el-button type=\"primary\" size=\"\
    mini\" icon=\"el-icon-search\" @click=\"do_action('find')\"></el-button>\n\t \
    \       <el-button v-if=\"multipleSelection.length == 0\" type=\"primary\" size=\"\
    mini\" icon=\"el-icon-document-add\" @click=\"do_action('new')\"></el-button>\n\
    \t        <el-button v-if=\"multipleSelection.length > 0\" type=\"primary\" size=\"\
    mini\" icon=\"el-icon-edit\" @click=\"do_action('edit')\"></el-button>\n\t   \
    \     <el-button v-if=\"multipleSelection.length > 0\" type=\"primary\" size=\"\
    mini\" icon=\"el-icon-view\" @click=\"do_action('lookup')\"></el-button>\n\t \
    \   </el-row>\n\t    <el-pagination v-if=\"multipleSelection.length > 1\" background\
    \ layout=\"prev, pager, next\" @current-change=\"handleCurrentChange\" :page-size=\"\
    pageSize\" :total=\"multipleSelection.length\">\n\t    </el-pagination>\n\t  \
    \  <el-form :model=\"dataForm\" label-width=\"auto\">\n\t\n\t\t\t\t<el-form-item\
    \ :label=\"colsLabel['fullname']\"\t\n\t\t\t\t\t<el-input v-model=\"dataForm['fullname']\"\
    \ maxlength=\"32767\" show-word-limit :prefix-icon=\"isCompute('fullname') ? 'el-icon-s-data':''\"\
    \ :readonly=\"readonly('fullname')\">\n\t\t\t\t\t\t<template #prefix>\n\t\t\t\t\
    \t\t   <el-dropdown v-if=\"colsTranslate['fullname']\" @command=\"i18nCommand\"\
    >\n\t\t\t\t\t\t\t  <span class=\"el-dropdown-link\">\n\t\t\t\t\t\t\t\t{{colsLang['fullname'].toLowerCase()}}<i\
    \ class=\"el-icon-arrow-down el-icon--right\"></i>\n\t\t\t\t\t\t\t  </span>\n\t\
    \t\t\t\t\t\t  <template #dropdown>\n\t\t\t\t\t\t\t\t<el-dropdown-menu>\n\t\t\t\
    \t\t\t\t\t  <el-dropdown-item v-for=\"lang in $UserPreferences.langs\" :key=lang.code\
    \ :command=\"{col:'fullname',lang:lang.code}\">{{lang.description}}</el-dropdown-item>\n\
    \t\t\t\t\t\t\t\t</el-dropdown-menu>\n\t\t\t\t\t\t\t  </template>\n\t\t\t\t\t\t\
    \t</el-dropdown>\n\t\t\t\t\t\t </template>\n\t\t\t\t\t</el-input>\n\t\t\t\t</el-form-item>\t\
    \t\t\n\t\t\t\n\t\t\t\t<el-form-item :label=\"colsLabel['framework']\"\n\t\t\t\t\
    \t<el-input v-model=\"dataForm['framework'].name\" :prefix-icon=\"isCompute('framework')\
    \ ? 'el-icon-s-data':''\" :readonly=\"readonly('framework')\">\n\t\t\t\t\t\t<template\
    \ #suffix>\n\t\t\t\t\t\t\t<el-button type=\"primary\" size=\"mini\" icon=\"el-icon-search\"\
    \ @click=\"do_find('framework')\"/>\n\t\t\t\t\t\t\t<el-button type=\"primary\"\
    \ size=\"mini\" icon=\"el-icon-document-add\" @click=\"do_add('framework')\"/>\n\
    \t\t\t\t\t\t\t<el-button v-if=\"dataForm['framework'].id != null\" type=\"primary\"\
    \ size=\"mini\" icon=\"el-icon-edit\" @click=\"do_edit('framework',dataForm['framework'].id)\"\
    /></\n\t\t\t\t\t\t\t<el-button v-if=\"dataForm['framework'].id != null\" type=\"\
    primary\" size=\"mini\" icon=\"el-icon-view\" @click=\"do_lookup('framework',dataForm['framework'].id)\"\
    />\n\t\t\t\t\t\t</template>\n\t\t\t\t\t</el-input>\n\t\t\t\t</el-form-item>\n\t\
    \t\t\t\t\t\t\n\t\t\t\t<el-form-item :label=\"colsLabel['code']\"\t\n\t\t\t\t\t\
    <el-input v-model=\"dataForm['code']\" maxlength=\"32\" show-word-limit :prefix-icon=\"\
    isCompute('code') ? 'el-icon-s-data':''\" :readonly=\"readonly('code')\">\n\t\t\
    \t\t\t\t<template #prefix>\n\t\t\t\t\t\t   <el-dropdown v-if=\"colsTranslate['code']\"\
    \ @command=\"i18nCommand\">\n\t\t\t\t\t\t\t  <span class=\"el-dropdown-link\"\
    >\n\t\t\t\t\t\t\t\t{{colsLang['code'].toLowerCase()}}<i class=\"el-icon-arrow-down\
    \ el-icon--right\"></i>\n\t\t\t\t\t\t\t  </span>\n\t\t\t\t\t\t\t  <template #dropdown>\n\
    \t\t\t\t\t\t\t\t<el-dropdown-menu>\n\t\t\t\t\t\t\t\t  <el-dropdown-item v-for=\"\
    lang in $UserPreferences.langs\" :key=lang.code :command=\"{col:'code',lang:lang.code}\"\
    >{{lang.description}}</el-dropdown-item>\n\t\t\t\t\t\t\t\t</el-dropdown-menu>\n\
    \t\t\t\t\t\t\t  </template>\n\t\t\t\t\t\t\t</el-dropdown>\n\t\t\t\t\t\t </template>\n\
    \t\t\t\t\t</el-input>\n\t\t\t\t</el-form-item>\t\t\t\n\t\t\t\n\t\t\t   \t<el-form-item\
    \ :label=\"colsLabel['exclude']\"\n\t\t\t\t\t<json-viewer :value=\"dataForm['exclude']\"\
    \ copyable boxed sort />\n\t\t\t\t</el-form-item>\n\t\t\t\t\n\t\t\t   \t<el-form-item\
    \ :label=\"colsLabel['note']\"\n\t\t\t\t\t<el-input v-model=\"dataForm['note']\"\
    \ type=\"textarea\" :readonly=\"readonly('note')\"/>            \n\t\t\t\t</el-form-item>\n\
    \t\t    <el-tabs type=\"border-card\" v-if=\"o2mcols.length > 0\">\n\t\t     \
    \   <el-tab-pane :label=\"colsLabel[o2mcol]\" v-for=\"o2mcol in o2mcols\" :key=\"\
    o2mcol\">\n\t\t            <gp-o2m-components :cid=\"cid\" :metas=\"metas\" :model=\"\
    metas[model].meta.columns[o2mcol].obj\" :cdata=\"dataForm[o2mcol]\" :mode=\"mode\"\
    />\n\t\t        </el-tab-pane>\n\t\t    </el-tabs>\n\t    </el-form>\n\t</slot>\n\
    \t<slot name=\"footer\">\n\t    <el-popconfirm confirmButtonText='OK' cancelButtonText='No,\
    \ Thanks' icon=\"el-icon-info\" iconColor=\"red\" title=\"Are you sure to cancel?\"\
    \ @confirm=\"onCancel\">\n\t        <template #reference>\n\t            <el-button\
    \ type=\"danger\">Cancel</el-button>\n\t        </template>\n\t    </el-popconfirm>\n\
    \t    <el-button type=\"success\" @click=\"onValidate\">Validate</el-button>\n\
    \t    <el-button type=\"primary\" @click=\"onSubmit\">Save</el-button>\n\t</slot>\t\
    \n</template>\t\t\n\t"
  vtype: form
- cols:
  - fullname
  - framework
  - code
  - exclude
  - note
  framework: elemnt-plus
  model: devel.ui.view.model.types
  script: ''
  sfc: "\n<template>\n\t<el-dialog :title=\"title\" v-model=\"showDialog\" width=\"\
    75%\">\n\t    <el-pagination v-if=\"oid != null && typeof oid == 'object' && oid.length\
    \ > 1\" background layout=\"prev, pager, next\" @current-change=\"handleCurrentChange\"\
    \ :page-size=\"pageSize\" :total=\"oid.length\"/>\n\t    <gp-form :cid=\"cid\"\
    \ :metas=\"metas\" :model=\"model\"/>\n\t</el-dialog>\n</template>\t\n\t\n\n\n\
    <style scoped lang=\"css\">\n<style>\t\n\t"
  style: "\n<style scoped lang=\"css\">\n<style>\t\n\t"
  template: "\n<template>\n\t<el-dialog :title=\"title\" v-model=\"showDialog\" width=\"\
    75%\">\n\t    <el-pagination v-if=\"oid != null && typeof oid == 'object' && oid.length\
    \ > 1\" background layout=\"prev, pager, next\" @current-change=\"handleCurrentChange\"\
    \ :page-size=\"pageSize\" :total=\"oid.length\"/>\n\t    <gp-form :cid=\"cid\"\
    \ :metas=\"metas\" :model=\"model\"/>\n\t</el-dialog>\n</template>\t\n\t"
  vtype: form.modal
- cols:
  - fullname
  - framework
  - code
  framework: elemnt-plus
  model: devel.ui.view.model.types
  script: ''
  sfc: "\n\n\n<style scoped lang=\"css\">\n<style>\t\n\t"
  style: "\n<style scoped lang=\"css\">\n<style>\t\n\t"
  template: ''
  vtype: list
- cols:
  - fullname
  - framework
  - code
  framework: elemnt-plus
  model: devel.ui.view.model.types
  script: ''
  sfc: "\n\n\n<style scoped lang=\"css\">\n<style>\t\n\t"
  style: "\n<style scoped lang=\"css\">\n<style>\t\n\t"
  template: ''
  vtype: m2mlist
- cols:
  - fullname
  - framework
  - code
  framework: elemnt-plus
  model: devel.ui.view.model.types
  script: ''
  sfc: "\n\n\n<style scoped lang=\"css\">\n<style>\t\n\t"
  style: "\n<style scoped lang=\"css\">\n<style>\t\n\t"
  template: ''
  vtype: search
- cols:
  - fullname
  - framework
  - code
  framework: elemnt-plus
  model: devel.ui.view.model.types
  script: ''
  sfc: "\n\n\n<style scoped lang=\"css\">\n<style>\t\n\t"
  style: "\n<style scoped lang=\"css\">\n<style>\t\n\t"
  template: ''
  vtype: find
